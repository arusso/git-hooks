#!/usr/bin/env ruby
# Author:  Aaron Russo <arusso@berkeley.edu>
# Date:    25-Sept-2012
# Purpose: post-receive hook used on puppetmaster hosts to manage puppet
#          environments dynamically
#
# Description:
#   This script handles the creation of puppet environments dynamically,
#   simply by pushing a new branch to the puppet git repository.
#
# Credit:
#   This hook is based (heavily) on code found at: 
#   http://puppetlabs.com/blog/git-workflow-and-puppet-environments/
#
# Updates:
#   11-Oct-2012: Added support for ignoring tags, and not erroring because
#                they look like poorly formed branches

require 'fileutils'

# This should be set to the where we are keeping our environments.  This
# script assumes environments will be located at $ENV_DIR/<environment>
ENVIRONMENT_BASEDIR = "/etc/puppet/environments"

# post-receive hooks set GIT_DIR to the current repository. If you want to
# clone from a non-local repository, set this to the URL of the repository,
# such as git@git.host:puppet.git
SOURCE_REPOSITORY = File.expand_path(ENV['GIT_DIR'])

# We'll use the following hash to map git branches to environments, if the
# branch name does not match the environment it should represent.  Useful
# for mapping 'master' to a default.
BRANCH_MAP = {
    # This will clone/pull the master branch into the development puppet 
    # environment
    "master"      => "development",
}

# Set this to a group that the puppet user is part of, such that it can read
# the repo to obtain manifest information
PUPPET_GROUP = "puppet"

# Repos will be created with the following file mode
ENVIRONMENT_MODE = 0750

# The git environment variable needs to be deleted, otherwise it will
# override the system default and cause issues when we try to initialize
# new repositories, since the GIT_DIR will be referring to this repo.
ENV.delete('GIT_DIR')

# Ensure that we have the underlying directories, otherwise the later 
# commands may fail in somewhat cryptic manners.
unless File.directory? ENVIRONMENT_BASEDIR
    puts %Q{-- #{ENVIRONMENT_BASEDIR} does not exist, cannot create environment directories.}
    exit 1
end

# You can push multiple refspecs at once, like:
# $ git push origin branch-a branch-b
# So we'll handle each one
$stdin.each_line do |line|
    # post-receive is provided 3 parameters via std for each push
    # old_revision  : revision we are updating from
    # new_revision  : revision we are updating to
    # refspec       : git refspec ie. refs/heads/<branch>
    old_revision, new_revision, refspec = line.split(" ")

    # Get the branch name from the refspec, and sanitize the input
    branch_name = refspec.sub(%r{^refs/heads/(.*$)}) { $1 }

    if branch_name =~ /[\W]/
        # before we yell at the user, lets make sure this isn't a tag
        if branch_name =~ /^refs\/tags\/.*$/
            # we found a tag, congratulate them and move on.
            tag_name = refspec.sub(%r{^refs/tags/(.*)$}) { $1 }
            puts %Q{-- tag "#{tag_name}". A new release?! Where are the beers?!}
        else
            # nope, just an ugly branch
            puts %Q{-- branch "#{branch_name}" has non-word chars, ignoring.}
        end
        next
    end

    if BRANCH_MAP[branch_name] != nil
        environment_name = BRANCH_MAP[branch_name]
        environment_path = "#{ENVIRONMENT_BASEDIR}/#{BRANCH_MAP[branch_name]}"
    else
        environment_name = branch_name
        environment_path = "#{ENVIRONMENT_BASEDIR}/#{branch_name}"
    end

    puts "-- branch \'#{branch_name}\' maps to environment \'#{environment_name}\'"

    if new_revision =~ /^0+$/
        # We've received a push with a null revision, which means we should
        # delete the given branch.
        puts "-- deleting existing environment #{environment_name}"
        if File.directory? environment_path
            FileUtils.rm_rf environment_path, :secure => true
        end
    else
        # We have been given a branch that needs to be created or updated.
        # If the environment exists, update it. Otherwise, we'll make it.
        if File.directory? environment_path
            # Update an existing environment.  We do a fetch and then a
            # reset in case someone did a force push to a branch
            puts "-- updating existing environment #{environment_name}"
            Dir.chdir environment_path
            %x{git fetch --all}
            %x{git reset --hard "origin/#{branch_name}"}
        else
            # Setup a new environment from the current repo
            puts "-- creating new environment '#{environment_name}'"
            %x{git clone #{SOURCE_REPOSITORY} #{environment_path} --branch #{branch_name}}
        end
    end
end

