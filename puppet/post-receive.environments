#!/usr/bin/env ruby
# Author:  Aaron Russo <arusso@berkeley.edu>
# Date:    25-Sept-2012
# Purpose: post-receive hook used on puppetmaster hosts to manage puppet
#          environments dynamically
#
# Description:
#   This script handles the creation of puppet environments dynamically,
#   simply by pushing a new branch to the puppet git repository.
#
# Credit:
#   This hook is based on code found at: 
#   http://puppetlabs.com/blog/git-workflow-and-puppet-environments/
#
# Updates:
#   11-Oct-2012: Added support for ignoring tags, and not erroring because
#                they look like poorly formed branches

load 'hooks/puppet-hooks-settings.rb'
require 'fileutils'

# The following can be found in the settings file
#
# ENVIRONMENT_BASEDIR
# GENERATE_DOCUMENTATION
# DOCUMENTATION_BASEDIR
# SOURCE_REPOSITORY
# BRANCH_MAP 
# PUPPET_GROUP
# ENVIRONMENT_MODE

# The git environment variable needs to be deleted, otherwise it will
# override the system default and cause issues when we try to initialize
# new repositories, since the GIT_DIR will be referring to this repo.
ENV.delete('GIT_DIR')

# Ensure that we have the underlying directories, otherwise the later 
# commands may fail in somewhat cryptic manners.
unless File.directory? ENVIRONMENT_BASEDIR
    puts %Q{-- #{ENVIRONMENT_BASEDIR} does not exist, cannot create environment directories.}
    exit 1
end

$stdin.each_line do |line|
    old_revision, new_revision, refspec = line.split(" ")

    # Get the branch name from the refspec, and sanitize the input
    branch_name = refspec.sub(%r{^refs/heads/(.*$)}) { $1 }

    if branch_name =~ /[\W]/
        # before we yell at the user, lets make sure this isn't a tag
        if branch_name =~ /^refs\/tags\/.*$/
            # we found a tag, congratulate them and move on.
            tag_name = refspec.sub(%r{^refs/tags/(.*)$}) { $1 }
        else
            # nope, just an ugly branch
            puts %Q{invalid branch name "#{branch_name}", ignoring}
        end
        next
    end

    if BRANCH_MAP[branch_name] != nil
        environment_name = BRANCH_MAP[branch_name]
        environment_path = "#{ENVIRONMENT_BASEDIR}/#{BRANCH_MAP[branch_name]}"
    else
        environment_name = branch_name
        environment_path = "#{ENVIRONMENT_BASEDIR}/#{branch_name}"
    end

    if new_revision =~ /^0+$/
        # We've received a push with a null revision, which means we should
        # delete the given branch.
        if File.directory? environment_path
            puts "deleting environment #{environment_name}"
            FileUtils.rm_rf environment_path, :secure => true
        end
    else
        # We have been given a branch that needs to be created or updated.
        # If the environment exists, update it. Otherwise, we'll make it.
        if File.directory? environment_path
            # Update an existing environment.  We do a fetch and then a
            # reset in case someone did a force push to a branch
            puts "updating environment #{environment_name}"
            Dir.chdir environment_path
            %x{git fetch --all}
            %x{git reset --hard "origin/#{branch_name}"}
        else
            puts "generating environment #{environment_name}"
            %x{git clone #{SOURCE_REPOSITORY} #{environment_path} --branch #{branch_name}}
            FileUtils.chown_R nil, PUPPET_GROUP, environment_path
            FileUtils.chmod_R ENVIRONMENT_MODE, environment_path
        end
    end
end

